<?php

class WRI_manual_relationships {
	
	function __construct() {
			
		$wri_general_settings = get_option('wri_general_settings');
		
		if ( 1 == $wri_general_settings['enable_wri_manual_relationships'] ) {		
			add_action( 'init', array( $this, 'register_manual_relationship_taxonomy' ) );
		
			add_filter( 'yarpp_settings_save', array( $this, 'set_wri_manual_relationships_tax_yarpp_weight' ), 10, 1 );
			//add_action( 'transition_post_status', array($this, 'refresh_manual_related_items_in_cache'), 10, 3);			
			add_action( 'admin_init', array( $this, 'wri_manual_relationships_init' ) );
			
		}
		
	}

	//public $wri_supported_post_type_names;
	
	public $wri_used_post_type_names;

    public function wri_manual_relationships_init() {
			
		$this->register_manual_relationships_field_group();	
		add_action( 'save_post', array($this, 'set_manual_relationship_taxonomies') );
		$this->register_manual_relationship_taxonomy();
		
	}

 
/**
 *  Register Field Groups
 *
 *  The register_field_group function accepts 1 array which holds the relevant data to register a field group
 *  You may edit the array as you see fit. However, this may result in errors if the array is not compatible with ACF
 * 
 * The base of this function was generated by AFC plugin.
 * 
 * Using ACF in a plugin
 * Including the (free) Advanced Custom Fields plugin inside a free / premium plugin is allowed.
 * You can NOT include any purchased add-ons within the plugin.
 * For your plugin to use any of the premium Add-ons you must ask the customer / user to purchase and include the Add-ons. 
 * 
 * IMPORTANT
 *  For more information, please read:
 *  - http://www.advancedcustomfields.com/terms-conditions/
 *  - http://www.advancedcustomfields.com/resources/getting-started/including-lite-mode-in-a-plugin-theme/
 * 
 */

	function register_manual_relationships_field_group() {

		global $wri, $wri_is_premium;

		$locations = array();
		$i = 0;

		foreach ( $wri->wri_used_post_types('names') as $wri_used_post_type_name ) {
			$i++;
			$locations[][] = array (
							'param' => 'post_type',
							'operator' => '==',
							'value' => $wri_used_post_type_name,
							'order_no' => 0,
							'group_no' => $i,
						);
		}

		if(function_exists("register_field_group"))
		{
			register_field_group(array (
				'id' => 'acf_wri-manual-relationships',
				'title' => 'WRI Manual Relationships (pro)',
				'fields' => array (
					array (
						'key' => 'field_526cc294759d6',
						'label' => __('Set manual relationships','wri'),
						'name' => $wri_is_premium ? 
							'wri_manual_relationships' :
							'wri_manual_relationships_FREE',
						'type' => 'relationship',
						'instructions' => $wri_is_premium ? 
							__('Chose items from left side list and add it to the right side list.','wri') :						
							__('This function is available only on WRI premium version. Manually adjusted relationships have no effects on WRI free version. You can try, but dont use it on free version, because relationships are not saved!','wri'),
						'return_format' => 'id',
						'post_type' => $wri->wri_used_post_types('names'), 
						'taxonomy' => array (
							0 => 'all',
						),
						'filters' => array (
							0 => 'search',
							1 => 'post_type',
						),
						'result_elements' => array (
							0 => 'featured_image',
							1 => 'post_type',
							2 => 'post_title',
						),
						'max' => '',
					),
				),
				'location' => $locations,
				/*array (
					array (
						array (
							'param' => 'post_type',
							'operator' => '==',
							'value' => 'post',
							'order_no' => 0,
							'group_no' => 0,
						),
					),
					array (
						array (
							'param' => 'post_type',
							'operator' => '==',
							'value' => 'product',
							'order_no' => 0,
							'group_no' => 1,
						),
					),
				),*/
				'options' => array (
					'position' => 'normal',
					'layout' => 'default',
					'hide_on_screen' => array (
					),
				),
				'menu_order' => 0,
			));
		}
	}
	function register_manual_relationship_taxonomy() {
		
		global $wri;
		
		// Add new taxonomy
		$labels = array(
			'name'              => _x( 'Manual Relationships', 'taxonomy general name','wri' ),
			'singular_name'     => _x( 'Manual Relationship', 'taxonomy singular name','wri' ),
		);
	
		$args = array(
			'hierarchical'      => false,
			'labels'            => $labels,
			'show_ui'           => false, //xxx
			'show_admin_column' => false,
			'query_var'         => true,
			'yarpp_support'		=> true,
		);
	
		register_taxonomy( 'wri_manual_relationships', $wri->wri_used_post_types('names'), $args );
		
		// Set yarpp_support argument for all taxonomies that is registered to the post type.
		$taxonomies = get_taxonomies('', 'objects');

	}	
	function set_manual_relationship_taxonomies( $reference_post_id ) {

		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) 
      		return;

	    if( defined( 'DOING_AJAX' ) && DOING_AJAX )
	        return;
	
		$reference_post_object = get_post($reference_post_id); 
	    # Block auto-drafts and revisions
	    if( in_array( $reference_post_object->post_status, array( 'auto-draft', 'inherit' ) ) )
	        return;			
		
		global $wpdb;

		/*							if (FALSE) { //if TRUE, delete every man_rel term!!! RESET
												$man_rel_taxonomies_of_reference_post_qry = $wpdb->get_results
												("
													SELECT * FROM `em_terms` 
													inner join em_term_taxonomy on em_term_taxonomy.term_id=em_terms.term_id
													WHERE em_term_taxonomy.taxonomy='wri_manual_relationships'
													and em_terms.name like 'man_rel:%'
												");
												if ( is_array($man_rel_taxonomies_of_reference_post_qry) ) {
												
													foreach ($man_rel_taxonomies_of_reference_post_qry as $man_rel_taxonomy_term_id) {
								
														wp_delete_term( $man_rel_taxonomy_term_id->term_id, 'wri_manual_relationships' );
													
													}
												}
									}
		*/
		
		$field_key = 'field_526cc294759d6'; 

		//local elements:
		$manually_related_post_id_array = get_field_object($field_key, $reference_post_id);
			
		$delete_where = ' 1=1 ';			
		
		if ( is_array($manually_related_post_id_array['value']) ) {
		
			foreach ($manually_related_post_id_array['value'] as $manually_related_post_id) {
				
				$delete_where.= "and terms.name not like 'man_rel:%--" . (string)$manually_related_post_id . "--%' ";
				
				$min_post_id = min ($reference_post_id, $manually_related_post_id);
				$max_post_id = max ($reference_post_id, $manually_related_post_id);
				
				//wp_set_object_terms( $object_id, $terms, $taxonomy, $append ) - acf
				wp_set_object_terms( $reference_post_id, (string)'man_rel:--'.$min_post_id . '--' . $max_post_id . '--', 'wri_manual_relationships', TRUE );
				wp_set_object_terms( $manually_related_post_id, (string)'man_rel:--'.$min_post_id . '--' . $max_post_id . '--', 'wri_manual_relationships', TRUE );				
				 
				$remote_manually_related_post_id_array = get_field_object($field_key, $reference_post_id);
				
				//add reference post into manually selected list of remote post
				if ( !( is_array( $remote_manually_related_post_id_array['value'] ) and in_array( $reference_post_id, $remote_manually_related_post_id_array['value'] ) ) ) {
					
					//add present elements of remote
					$remote_elements = get_field_object( $field_key, $manually_related_post_id ); //get old elements

					//if $reference_post_id has not in the $remote_elements['value'] array yet, then we put into it
 					if ( !( is_array($remote_elements['value']) and in_array($reference_post_id, $remote_elements['value']) ) ) {
						$remote_elements['value'][] = $reference_post_id;  //add actual element
					}
											
					$remote_elements['value'] = array_unique( $remote_elements['value'] ); //remove duplicate values for cleaning data backward 
					
					//update_field( $field_key, $value, $post_id ) - acf
					update_field( $field_key, $remote_elements['value'], $manually_related_post_id ); //update the field with new list

				} 
						
			}	

		}

		$man_rel_taxonomies_of_reference_post_qry = $wpdb->get_results
		("
			select term_id, 
				case when
					post_id_1 = " . (string)$reference_post_id . " then post_id_2 
					else post_id_1 
				end foreign_post_id 
			from
				(
				SELECT terms.term_id,
				substr(
					replace(name, 'man_rel:--', ''),
					1,
					instr(      replace(name, 'man_rel:--', '')     ,'--')-1
					) post_id_1,
				replace(
					substr(
						substr(name, instr(name,'--')+2)
						,instr(          substr(name, instr(name,'--')+2)      ,'--')+2
						)
					,'--',''
					) post_id_2
				FROM {$wpdb->prefix}terms terms 
				inner join {$wpdb->prefix}term_taxonomy term_taxonomy on term_taxonomy.term_id=terms.term_id
				WHERE term_taxonomy.taxonomy='wri_manual_relationships'
				and terms.name like 'man_rel:%--" . (string)$reference_post_id . "--%'
				and " . $delete_where . "
				) subsel1
		");
		
		if ( is_array($man_rel_taxonomies_of_reference_post_qry) ) {
		
			foreach ($man_rel_taxonomies_of_reference_post_qry as $man_rel_taxonomy_term_id) {
				
				//wp_delete_term( $term_id, $taxonomy, $args )	
				wp_delete_term( $man_rel_taxonomy_term_id->term_id, 'wri_manual_relationships' );

				//delete removed elements from remote list
				$remote_elements = get_field_object( $field_key, $man_rel_taxonomy_term_id->foreign_post_id ); //get existing elements
				$remote_elements['value'] = array_diff( $remote_elements['value'], array($reference_post_id));  //get out actual element
				update_field( $field_key, $remote_elements['value'], $man_rel_taxonomy_term_id->foreign_post_id ); //update the field with new list
				//update_field( $field_key, $value, $post_id ) - acf
			
			}

		}

	}
	function set_wri_manual_relationships_tax_yarpp_weight( $new_options ) {
		//set special weight for wri_manual_relationships taxonomy 
		$wri_general_settings = get_option('wri_general_settings');
	
		$new_options['weight']['tax']['wri_manual_relationships'] = (int) $wri_general_settings['wri_maual_relationships_weight'];
		
		return $new_options;
		
	}			
	/*	
	function refresh_manual_related_items_in_cache( $new_status, $old_status, $post ) {

		global $yarpp;
		$post_ID = $post->ID;

		// parent of revision
		if ( $the_post = wp_is_post_revision($post_ID) )
			$post_ID = $the_post;

		$field_key = 'field_526cc294759d6'; 

		$manually_related_post_id_array = get_field_object($field_key, $post_ID);

		$yarpp->cache->clear((int) $post_ID);
	}
	*/
	
}